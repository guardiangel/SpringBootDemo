<!-- Level from high to low OFF , FATAL , ERROR , WARN , INFO , DEBUG , TRACE , ALL -->
<!-- Log output rules According to the current ROOT level, when the log output level is higher than the root default level, it will be output -->
<!-- The filter of each configuration below is to filter out the output file, high-level files will appear, and low-level log information will still appear, and only the logs of this level will be recorded through filter filtering -->
<!-- scan When this property is set to true, the configuration file will be reloaded if changed, the default value is true. -->
<!-- scanPeriod Sets the time interval for monitoring whether the configuration file is modified. If no time unit is given, the default unit is milliseconds. This property takes effect when scan is true. The default time interval is 1 minute. -->
<!-- debug When this property is set to true, the internal log information of logback will be printed out, and the running status of logback will be checked in real time. The default value is false. -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- Associated with the logger contexts in each of your web-applications will collide -->
	<jmxConfigurator />
	<!-- The location where the log is written to -->
	<property name="log_dir" value="/SpringBootDemo_logs" />
	<!-- The log history -->
	<property name="maxHistory" value="30" />
	<!--Formatted output: %d indicates the date, %thread indicates the thread name,
	 %-5level: the level displays 5 characters width from the left %msg: log message, %n is a newline character -->
	<property name="FORMAT" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n" />

	<!-- ConsoleAppender  -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>
				<!-- -->
				${FORMAT}
			</pattern>
		</encoder>
	</appender>

	<!-- ERROR -->
	<!-- Roll the record file, first record the log to the specified file,
	and record the log to other files when a certain condition is met RollingFileAppender -->
	<appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- If the log level is equal to the configured level,
		the filter will accept or reject the log according to onMath and onMismatch. -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- Set filter level-->
			<level>ERROR</level>
			<!-- Used to configure actions that match filter conditions-->
			<onMatch>ACCEPT</onMatch>
			<!-- Used to configure actions that do not meet the filter conditions -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- The most commonly used scrolling strategy, it formulates a scrolling strategy based on time.
		 It is responsible for both scrolling and starting scrolling -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--Log output location can be relative, and absolute path -->
			<fileNamePattern>
				${log_dir}/error/%d{yyyy-MM-dd}/error.log
			</fileNamePattern>
			<!-- An optional node, which controls the maximum number of archive files to keep,
			and deletes old files if the number exceeds.
			Assuming that the monthly rollover is set, and <maxHistory> is 6,
			only the files of the last 6 months are saved, and the old files before are deleted.
			Note that when deleting old files, the directories created for archiving will also be deleted -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>
				<!-- Set the log output format-->
				${FORMAT}
			</pattern>
		</encoder>
	</appender>

	<!-- WARN level log appender -->
	<appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log_dir}/warn/%d{yyyy-MM-dd}/warn.log</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>${FORMAT}</pattern>
		</encoder>
	</appender>

	<appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log_dir}/info/%d{yyyy-MM-dd}/info.log</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>${FORMAT}</pattern>
		</encoder>
	</appender>

	<appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log_dir}/debug/%d{yyyy-MM-dd}/debug.log</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>${FORMAT}</pattern>
		</encoder>
	</appender>

	<!-- root级别 -->
	<root>
		<!-- Only logs of this level and above will be output to the specified channel -->
		<level value="INFO" />
		<appender-ref ref="console" />
		<appender-ref ref="ERROR" />
		<appender-ref ref="INFO" />
		<appender-ref ref="WARN" />
		<appender-ref ref="DEBUG" />
	</root>
</configuration>